input AddToArticleOnCommentArticleInput {
  commentsCommentId: ID!
  articleArticleId: ID!
  clientMutationId: String!
}

type AddToArticleOnCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  articleArticle: Article
  commentsComment: Comment
  articleArticleEdge: ArticleEdge
  commentsCommentEdge: CommentEdge
}

type AddToFavoriteArticlesPayload {
  viewer: Viewer!
  clientMutationId: String!
  favoritedByUser: User
  favoritedArticlesArticle: Article
  favoritedByUserEdge: UserEdge
  favoritedArticlesArticleEdge: ArticleEdge
}

input AddToFavoriteArticlesUserInput {
  favoritedArticlesArticleId: ID!
  favoritedByUserId: ID!
  clientMutationId: String!
}

type AddToUserOnArticlePayload {
  viewer: Viewer!
  clientMutationId: String!
  authorUser: User
  articlesArticle: Article
  authorUserEdge: UserEdge
  articlesArticleEdge: ArticleEdge
}

input AddToUserOnArticleUserInput {
  articlesArticleId: ID!
  authorUserId: ID!
  clientMutationId: String!
}

type AddToUserOnCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  authorUser: User
  commentsComment: Comment
  authorUserEdge: UserEdge
  commentsCommentEdge: CommentEdge
}

input AddToUserOnCommentUserInput {
  commentsCommentId: ID!
  authorUserId: ID!
  clientMutationId: String!
}

type Article implements Node {
  author(filter: UserFilter): User!
  body: String!
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection
  createdAt: DateTime!
  description: String!
  favoritedBy(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  id: ID!
  slug: String
  title: String!
  updatedAt: DateTime!
}

input ArticlecommentsComment {
  body: String
  authorId: ID
}

# A connection to a list of items.
type ArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArticleEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ArticleEdge {
  # The item at the end of the edge.
  node: Article!

  # A cursor for use in pagination.
  cursor: String!
}

input ArticleFilter {
  # Logical AND on all given filters.
  AND: [ArticleFilter!]

  # Logical OR on all given filters.
  OR: [ArticleFilter!]
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  author: UserFilter
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  favoritedBy_every: UserFilter
  favoritedBy_some: UserFilter
  favoritedBy_none: UserFilter
}

enum ArticleOrderBy {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AUTH_PROVIDER_EMAIL {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  email: AUTH_PROVIDER_EMAIL
}

type Comment implements Node {
  article(filter: ArticleFilter): Article!
  author(filter: UserFilter): User!
  body: String
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input CommentarticleArticle {
  body: String!
  description: String!
  slug: String
  title: String!
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge.
  node: Comment!

  # A cursor for use in pagination.
  cursor: String!
}

input CommentFilter {
  # Logical AND on all given filters.
  AND: [CommentFilter!]

  # Logical OR on all given filters.
  OR: [CommentFilter!]
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  article: ArticleFilter
  author: UserFilter
}

enum CommentOrderBy {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CreateArticle {
  body: String!
  description: String!
  slug: String
  title: String!
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
}

input CreateArticleInput {
  body: String!
  description: String!
  slug: String
  title: String!
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
  clientMutationId: String!
}

type CreateArticlePayload {
  viewer: Viewer!
  clientMutationId: String!
  article: Article
  edge: ArticleEdge
  author: User
}

input CreateComment {
  body: String
  articleId: ID
  article: CommentarticleArticle
  authorId: ID
}

input CreateCommentInput {
  body: String
  articleId: ID
  article: CommentarticleArticle
  authorId: ID
  clientMutationId: String!
}

type CreateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  article: Article
  author: User
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateUser {
  bio: String
  name: String!
  profilePictureUrl: String
  articlesIds: [ID!]
  articles: [UserarticlesArticle!]
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  favoritedArticlesIds: [ID!]
  favoritedArticles: [UserfavoritedArticlesArticle!]
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteArticleInput {
  id: ID!
  clientMutationId: String!
}

type DeleteArticlePayload {
  viewer: Viewer!
  clientMutationId: String!
  article: Article
  edge: ArticleEdge
  author: User
  deletedId: ID
}

input DeleteCommentInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  article: Article
  author: User
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type Mutation {
  createArticle(input: CreateArticleInput!): CreateArticlePayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  updateArticle(input: UpdateArticleInput!): UpdateArticlePayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateArticle(input: UpdateOrCreateArticleInput!): UpdateOrCreateArticlePayload
  updateOrCreateComment(input: UpdateOrCreateCommentInput!): UpdateOrCreateCommentPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteArticle(input: DeleteArticleInput!): DeleteArticlePayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToArticleOnComment(input: AddToArticleOnCommentArticleInput!): AddToArticleOnCommentPayload
  addToFavoriteArticles(input: AddToFavoriteArticlesUserInput!): AddToFavoriteArticlesPayload
  addToUserOnArticle(input: AddToUserOnArticleUserInput!): AddToUserOnArticlePayload
  addToUserOnComment(input: AddToUserOnCommentUserInput!): AddToUserOnCommentPayload
  removeFromFavoriteArticles(input: RemoveFromFavoriteArticlesUserInput!): RemoveFromFavoriteArticlesPayload
  signinUser(input: SigninUserInput!): SigninPayload!
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type RemoveFromFavoriteArticlesPayload {
  viewer: Viewer!
  clientMutationId: String!
  favoritedByUser: User
  favoritedArticlesArticle: Article
  favoritedByUserEdge: UserEdge
  favoritedArticlesArticleEdge: ArticleEdge
}

input RemoveFromFavoriteArticlesUserInput {
  favoritedArticlesArticleId: ID!
  favoritedByUserId: ID!
  clientMutationId: String!
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type SigninPayload {
  token: String
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input SigninUserInput {
  email: AUTH_PROVIDER_EMAIL
  clientMutationId: String!
}

input SignupUserInput {
  bio: String
  name: String!
  profilePictureUrl: String
  articlesIds: [ID!]
  articles: [UserarticlesArticle!]
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  favoritedArticlesIds: [ID!]
  favoritedArticles: [UserfavoritedArticlesArticle!]
  clientMutationId: String!
  authProvider: AuthProviderSignupData!
}

input UpdateArticle {
  body: String
  description: String
  id: ID!
  slug: String
  title: String
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
}

input UpdateArticleInput {
  body: String
  description: String
  id: ID!
  slug: String
  title: String
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
  clientMutationId: String!
}

type UpdateArticlePayload {
  viewer: Viewer!
  clientMutationId: String!
  article: Article
  edge: ArticleEdge
  author: User
}

input UpdateComment {
  body: String
  id: ID!
  articleId: ID
  article: CommentarticleArticle
  authorId: ID
}

input UpdateCommentInput {
  body: String
  id: ID!
  articleId: ID
  article: CommentarticleArticle
  authorId: ID
  clientMutationId: String!
}

type UpdateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  article: Article
  author: User
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateArticleInput {
  update: UpdateArticle!
  create: CreateArticle!
  clientMutationId: String!
}

type UpdateOrCreateArticlePayload {
  viewer: Viewer!
  clientMutationId: String!
  article: Article
  edge: ArticleEdge
  author: User
}

input UpdateOrCreateCommentInput {
  update: UpdateComment!
  create: CreateComment!
  clientMutationId: String!
}

type UpdateOrCreateCommentPayload {
  viewer: Viewer!
  clientMutationId: String!
  comment: Comment
  edge: CommentEdge
  article: Article
  author: User
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateUser {
  bio: String
  id: ID!
  name: String
  profilePictureUrl: String
  articlesIds: [ID!]
  articles: [UserarticlesArticle!]
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  favoritedArticlesIds: [ID!]
  favoritedArticles: [UserfavoritedArticlesArticle!]
}

input UpdateUserInput {
  bio: String
  id: ID!
  name: String
  profilePictureUrl: String
  articlesIds: [ID!]
  articles: [UserarticlesArticle!]
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  favoritedArticlesIds: [ID!]
  favoritedArticles: [UserfavoritedArticlesArticle!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  articles(filter: ArticleFilter, orderBy: ArticleOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection
  bio: String
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection
  createdAt: DateTime!
  email: String
  favoritedArticles(filter: ArticleFilter, orderBy: ArticleOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection
  id: ID!
  name: String!
  password: String
  profilePictureUrl: String
  updatedAt: DateTime!
}

input UserarticlesArticle {
  body: String!
  description: String!
  slug: String
  title: String!
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
}

input UsercommentsComment {
  body: String
  articleId: ID
  article: CommentarticleArticle
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserfavoritedArticlesArticle {
  body: String!
  description: String!
  slug: String
  title: String!
  authorId: ID
  commentsIds: [ID!]
  comments: [ArticlecommentsComment!]
  favoritedByIds: [ID!]
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  bio: String

  # All values that are not equal to given value.
  bio_not: String

  # All values that are contained in given list.
  bio_in: [String!]

  # All values that are not contained in given list.
  bio_not_in: [String!]

  # All values less than the given value.
  bio_lt: String

  # All values less than or equal the given value.
  bio_lte: String

  # All values greater than the given value.
  bio_gt: String

  # All values greater than or equal the given value.
  bio_gte: String

  # All values containing the given string.
  bio_contains: String

  # All values not containing the given string.
  bio_not_contains: String

  # All values starting with the given string.
  bio_starts_with: String

  # All values not starting with the given string.
  bio_not_starts_with: String

  # All values ending with the given string.
  bio_ends_with: String

  # All values not ending with the given string.
  bio_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  profilePictureUrl: String

  # All values that are not equal to given value.
  profilePictureUrl_not: String

  # All values that are contained in given list.
  profilePictureUrl_in: [String!]

  # All values that are not contained in given list.
  profilePictureUrl_not_in: [String!]

  # All values less than the given value.
  profilePictureUrl_lt: String

  # All values less than or equal the given value.
  profilePictureUrl_lte: String

  # All values greater than the given value.
  profilePictureUrl_gt: String

  # All values greater than or equal the given value.
  profilePictureUrl_gte: String

  # All values containing the given string.
  profilePictureUrl_contains: String

  # All values not containing the given string.
  profilePictureUrl_not_contains: String

  # All values starting with the given string.
  profilePictureUrl_starts_with: String

  # All values not starting with the given string.
  profilePictureUrl_not_starts_with: String

  # All values ending with the given string.
  profilePictureUrl_ends_with: String

  # All values not ending with the given string.
  profilePictureUrl_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  articles_every: ArticleFilter
  articles_some: ArticleFilter
  articles_none: ArticleFilter
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  favoritedArticles_every: ArticleFilter
  favoritedArticles_some: ArticleFilter
  favoritedArticles_none: ArticleFilter
}

enum UserOrderBy {
  bio_ASC
  bio_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  profilePictureUrl_ASC
  profilePictureUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allArticles(filter: ArticleFilter, orderBy: ArticleOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  allComments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Article(id: ID, slug: String): Article
  Comment(id: ID): Comment
  File(id: ID, secret: String, url: String): File
  User(email: String, id: ID, name: String): User
  id: ID!
}

